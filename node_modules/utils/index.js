var undersc = require('underscore');

exports.getDocNames = function(docs) {
    var docNames = [];
    for (var i = 0; i < docs.length; i++) {
        var identifierName = docs[i]['identifier'].split('-')[0];
        if (docNames.indexOf(identifierName) < 0) {
            docNames.push(identifierName);
        }
    }
    return docNames;
}

exports.getStringVersions = function(docs, rn) {
    var versions = [];
    for (var i = 0; i < docs.length; i++) {
        if (docs[i]['identifier'].split('-')[0] == rn) {
            var identifierVersion = docs[i]['identifier'].split('-')[1].split('_').join('.');
            versions.push(identifierVersion);
        }
    }
    return versions;
}

getChildrenList = function(docs, identifier) {
    var docsLength = docs.length;
    for (var i = 0; i < docsLength; i++) {
        if (docs[i]['identifier'] == identifier) {
            return docs[i]['children'];
        }
    }
}

getIdentifierList = function(docs, identifier) {
    var childList = getChildrenList(docs, identifier);
    if (childList) {
        return [identifier].concat(childList.map(function(childID) {return getIdentifierList(docs, childID);}));
    }
    return [identifier];
}

getOptionsDict = function(docs, identifier) {
    for (var i = 0; i < docs.length; i++) {
        if (identifier == docs[i]['identifier']) {
            return docs[i]['options'];
        }
    }
}

buildIDTree = function(docs, arr) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] instanceof Array) {
            buildIDTree(docs, arr[i]);
        } else {
            var idName = arr[i].split('-')[0];
            var idVersion = arr[i].split('-')[1].split('_').join('.');
            var idOptions = getOptionsDict(docs, arr[i]);
            arr[i] = {"tablename": idName, "tableversion": idVersion, "tableoptions": idOptions};
        }
    }
}

exports.getIdentifierTree = function(docs, identifier) {
    var idList = getIdentifierList(docs, identifier);
    buildIDTree(docs, idList);
    return(undersc.flatten(idList));
}

buildTrain = function(docs, topLevel, candidates, pathArray) {
    if (pathArray[pathArray.length - 1] == topLevel) {
        return pathArray;
    }

    for (var i = 0; i < candidates.length; i++) {
        for (var j = 0; j < docs.length; j++) {
            if (docs[j]['identifier'] == candidates[i] && docs[j]['children'].indexOf(pathArray[pathArray.length-1]) > -1) {
                pathArray.push(candidates[i]);
                return buildTrain(docs, topLevel, candidates, pathArray);
            }
        }
    }
}

exports.getDescendents = function(docs, topID, terminalID) {
    var idList = undersc.flatten(getIdentifierList(docs, topID));
    var descendentTrain = buildTrain(docs, topID, idList, [terminalID]);
    return descendentTrain;
}
