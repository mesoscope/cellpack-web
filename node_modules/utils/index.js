getIdentifierName = function(identifier) {
  return identifier.split("-")[0];
}

exports.getDocNames = function(docs) {
  var docNames = [];
  var docsLength = docs.length;
  for (var i = 0; i < docsLength; i++) {
    var identifierName = getIdentifierName(docs[i]["identifier"]);
    if (docNames.indexOf(identifierName) < 0) {
      docNames.push(identifierName);
    }
  }
  return docNames;
}

getRawVersion = function(identifier) {
  return identifier.split("-")[1].split("_");
}

getStringVersion = function(identifier) {
  return getRawVersion(identifier).join(".");
}

getVersions = function(docs, rn, versfn) {
  var versions = [];
  var docsLength = docs.length;
  for (var i = 0; i < docsLength; i++) {
    if (getIdentifierName(docs[i]["identifier"]) == rn) {
      var identifierVersion = versfn(docs[i]["identifier"]);
      versions.push(identifierVersion);
    }
  }
  return versions;
}

exports.getRawVersions = function(docs, rn) {
  return getVersions(docs, rn, getRawVersion)
}

exports.getStringVersions = function(docs, rn) {
  return getVersions(docs, rn, getStringVersion)
}

exports.getCurrentArrayVersion = function(docs, rn) {
  // should be array of arrays
  var versions = getVersions(docs, rn, getRawVersion);
  var versionsLength = versions.length;
  var currentVersion = [-1, -1, -1];
  for (var i = 0; i < versionsLength; i++) {
    if (versions[i][0] > currentVersion[0]) {
      currentVersion = versions[i];
    }
    else if (versions[i][0] == currentVersion[0] && versions[i][1] > currentVersion[1]) {
      currentVersion = versions[i];
    }
    else if (versions[i][0] == currentVersion[0] && versions[i][1] == currentVersion[1] && versions[i][2] > currentVersion[2]) {
      currentVersion = versions[i];
    }
  }
  return currentVersion;
}

exports.constructIdentifier = function(n, maj, min, bug) {
  return n.concat('-', maj, '_', min, '_', bug);
}

getChildrenList = function(docs, identifier) {
  var docsLength = docs.length;
  for (var i = 0; i < docsLength; i++) {
    if (docs[i]['identifier'] == identifier) {
      return docs[i]['children'];
    }
  }
}

getIdentifierList = function(docs, identifier) {
  var idList = [];
  idList.push(identifier);
  var children = getChildrenList(docs, identifier);
  if (children) {
    var childrenLength = children.length;
    for (var i = 0; i < childrenLength; i++) {
    // list of children's children
      var childChildren = getChildrenList(docs, children[i]);
      if (childChildren) {
        idList.push(children[i]);
        idList.concat(childChildren);
      } else {
        idList.push(children[i]);
      }
    }
  }
  return idList;
}

getOptionsDict = function(docs, identifier) {
  var docsLength = docs.length;
  for (var i = 0; i < docsLength; i++) {
    if (docs[i]['identifier'] == identifier) {
      return docs[i]['options'];
    }
  }
}

exports.getIdentifierTree = function(docs, identifier) {
  // start here ya?
  var idList = getIdentifierList(docs, identifier);
  var idlLength = idList.length;
  var idTree = [];
  for (var i = 0; i < idlLength; i++) {
    var idName = getIdentifierName(idList[i]);
    var idVersion = getStringVersion(idList[i]);
    var idOptions = getOptionsDict(docs, idList[i]);
    idTree.push({"tablename": idName, "tableversion": idVersion, "tableoptions": idOptions});
  }
  return idTree;
}
