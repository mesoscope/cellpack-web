getIdentifierName = function(identifier) {
  return identifier.split("-")[0];
}

// reconcile these functions
exports.getIdentifierName = function(identifier) {
  return identifier.split("-")[0];
}

getRawVersion = function(identifier) {
  return identifier.split("-")[1].split("_");
}

// reconcile
exports.getRawVersion = function(identifier) {
  return identifier.split("-")[1].split("_");
}

getStringVersion = function(identifier) {
  return getRawVersion(identifier).join(".");
}

// reconcile
exports.getStringVersion = function(identifier) {
  return getRawVersion(identifier).join(".");
}

exports.getDocNames = function(docs) {
  var docNames = [];
  var docsLength = docs.length;
  for (var i = 0; i < docsLength; i++) {
    var identifierName = getIdentifierName(docs[i]["identifier"]);
    if (docNames.indexOf(identifierName) < 0) {
      docNames.push(identifierName);
    }
  }
  return docNames;
}

getVersions = function(docs, rn, versfn) {
  var versions = [];
  var docsLength = docs.length;
  for (var i = 0; i < docsLength; i++) {
    if (getIdentifierName(docs[i]["identifier"]) == rn) {
      var identifierVersion = versfn(docs[i]["identifier"]);
      versions.push(identifierVersion);
    }
  }
  return versions;
}

// reconcile this
exports.getVersions = function(docs, rn, versfn) {
  var versions = [];
  var docsLength = docs.length;
  for (var i = 0; i < docsLength; i++) {
    if (getIdentifierName(docs[i]["identifier"]) == rn) {
      var identifierVersion = versfn(docs[i]["identifier"]);
      versions.push(identifierVersion);
    }
  }
  return versions;
}


exports.getCurrentVersion = function(docs, rn) {
  // should be array of arrays
  var versions = getVersions(docs, rn, getRawVersion);
  var versionsLength = versions.length;
  var currentVersion = [-1, -1, -1];
  for (var i = 0; i < versionsLength; i++) {
    if (versions[i][0] > currentVersion[0]) {
      currentVersion = versions[i];
    }
    else if (versions[i][0] == currentVersion[0] && versions[i][1] > currentVersion[1]) {
      currentVersion = versions[i];
    }
    else if (versions[i][0] == currentVersion[0] && versions[i][1] == currentVersion[1] && versions[i][2] > currentVersion[2]) {
      currentVersion = versions[i];
    }
  }
  return currentVersion;
}
